# Deep MNIST

#~~~~~~~~~~~~~~~~~~~~~~~~~
#### Start tf session ####
#~~~~~~~~~~~~~~~~~~~~~~~~~

import tensorflow as tf

# In this sample, an Interactive Session is used. In contrast to the common graph->session
# batch flow, this allows for an interactive work session in iPython style. Note that in
# this interactive session, we start the session before defining the graph. In a non-interactive
# session, we define the graph THEN start the session.

#gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.333) 
#sess = tf.Session(config=tf.ConfigProto(log_device_placement=True, gpu_options=gpu_options))

sess = tf.InteractiveSession()


#~~~~~~~~~~~~~~~~~~
#### Load data ####
#~~~~~~~~~~~~~~~~~~

from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets('MNIST_data', one_hot=True)



#~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### Softmax Regression ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Node placeholders
x = tf.placeholder(tf.float32, shape=[None, 784])
y_ = tf.placeholder(tf.float32, shape=[None, 10])

# Variables for weights and biases
W = tf.Variable(tf.zeros([784,10]))
b = tf.Variable(tf.zeros([10]))

# Initialize the variables
sess.run(tf.global_variables_initializer())

# Cost function
y = tf.matmul(x, W) + b
cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(y, y_))  # Note that we don't use the raw formulation as in MNIST_Sample.py. This is because the raw formula is numerically unstable.


#~~~~~~~~~~~~~~~~~~~~~~~
#### Model Training ####
#~~~~~~~~~~~~~~~~~~~~~~~
train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)

for i in range(1000):
  batch = mnist.train.next_batch(100)
  train_step.run(feed_dict={x: batch[0], y_: batch[1]})

#~~~~~~~~~~~~~~~~~~~~~~~~~
#### Model evaluation ####
#~~~~~~~~~~~~~~~~~~~~~~~~~
correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
print(accuracy.eval(feed_dict={x: mnist.test.images, y_: mnist.test.labels}))

